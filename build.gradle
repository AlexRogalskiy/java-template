plugins {
    id 'java'
    id 'jacoco'
    id 'application'

    id 'org.sonarqube' version '3.0'
    id 'com.diffplug.gradle.spotless' version '4.4.0'
    id 'com.github.johnrengelman.shadow' version '6.0.0'
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

group = groupId
version = artifactVersion

sourceCompatibility = 11
targetCompatibility = 11

spotless {
    java {
        encoding 'UTF-8'
        removeUnusedImports()
        eclipse().configFile "${projectDir}/config/codestyle.xml"
    }
}

configurations {
    all {
        resolutionStrategy {
            cacheChangingModulesFor(1000, 'seconds') // refresh cache for snapshots
        }
    }
}

dependencies {
    compile 'org.jetbrains:annotations:20.1.0'
    compile 'ch.qos.logback:logback-classic:1.2.3'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testCompile 'org.junit.jupiter:junit-jupiter-params:5.7.0'
}

//noinspection GroovyAssignabilityCheck
run {
    environment([
            "SECURITY_ENABLED": "false",
    ])
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }

    environment([
            "SECURITY_ENABLED"     : "false",
            "USE_INTEGRATION_TESTS": "$useIntegrationTests",
    ])
}

mainClassName = "micronaut.template.Application"
jar.enabled = true
shadowJar {
    mergeServiceFiles()
    manifest {
        attributes 'Main-Class': mainClassName
        attributes 'Implementation-Version': artifactVersion
        attributes 'Build-Version': buildNumber
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
    options.fork = true
}

tasks.withType(Test) {
    reports.html.enabled = false
    reports.junitXml.enabled = false
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
}
